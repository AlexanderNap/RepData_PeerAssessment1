m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
## Return a matrix that is the inverse of 'x'
m
}
x1<-rnorm(12)
x2<-x1
x3<-rnorm(12)
aaa$set(x1)
cacheSolve(aaa)
x1<-matrix(rnorm(12),nrow=3,ncol=4)
x2<-x1
x3<-matrix(rnorm(12),nrow=3,ncol=4)
x3
x1
x2
aaa$set(x1)
cacheSolve(aaa)
x1<-matrix(rnorm(14),nrow=4,ncol=4)
x1<-matrix(rnorm(16),nrow=4,ncol=4)
x2<-x1
x3<-matrix(rnorm(14),nrow=4,ncol=4)
x3<-matrix(rnorm(16),nrow=4,ncol=4)
aaa$set(x1)
cacheSolve(aaa)
aaa$getInverse()
aaa$set(x2)
cacheSolve(aaa)
cacheSolve(aaa)
bbb<-makeCacheMatrix()
bbb$set(x3)
cacheSolve(bbb)
cacheSolve(bbb)
ccc<-makeCacheMatrix()
ccc$set(x2)
cacheSolve(ccc)
cacheSolve(ccc)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
## Return a matrix that is the inverse of 'x'
return (m)
}
cacheSolve(ccc)
inverse <<- NULL
## Programming Assignment 2: Lexical Scoping
## There are a pair of functions that can calulate and cache the inverse of a matrix.
## Creating a special "matrix" object that can cache its inverse.
## It allows getting and setting matrix and its inverse via caching.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object.
## If the inverse has already been calculated, then the cacheSolve should retrieve the inverse from the cache.
## Otherwise, it calculates the invers of a matrix and sets it in the cache.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
## check if the inverse has already been calculated
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
## Return a matrix that is the inverse of 'x'
return (m)
}
X1<-matrix(rnorm(16),nrow=4,ncol=4)
o<-makeCacheMatrix()
o$set(X1)
cacheSolve(a)
cacheSolve(o)
## Programming Assignment 2: Lexical Scoping
## There are a pair of functions that can calulate and cache the inverse of a matrix.
## Creating a special "matrix" object that can cache its inverse.
## It allows getting and setting matrix and its inverse via caching.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object.
## If the inverse has already been calculated, then the cacheSolve should retrieve the inverse from the cache.
## Otherwise, it calculates the invers of a matrix and sets it in the cache.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
## check if the inverse has already been calculated
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
## Return a matrix that is the inverse of 'x'
return (m)
}
cacheSolve(o)
o<-makeCacheMatrix()
o$set(X1)
cacheSolve(o)
cacheSolve(o)
cacheSolve(o)
## Programming Assignment 2: Lexical Scoping
## There are a pair of functions that can calulate and cache the inverse of a matrix.
## Creating a special "matrix" object that can cache its inverse.
## It allows getting and setting matrix and its inverse via caching.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object.
## If the inverse has already been calculated, then the cacheSolve should retrieve the inverse from the cache.
## Otherwise, it calculates the invers of a matrix and sets it in the cache.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
## check if the inverse has already been calculated
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
## Return a matrix that is the inverse of 'x'
return (m)
}
cacheSolve(o)
cacheSolve(o)
o<-makeCacheMatrix()
o$set(X1)
cacheSolve(o)
cacheSolve(o)
library(swirl)
swirl()
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y<0]
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2<-matrix(1:10,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
Sys.Date()
format(Sys.Date(),"%a")
?xyplot
library(lattice)
?xyplot
str(xyplot)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
library(datasets)
data(airquility)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?print.trellis()
?splom()
?trellis.par.set
show.settings()
?show.settings()
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packeges("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?qplot
g<-ggplot(airquality, aes(Wind, Ozone))
str(g)
class(g)
print)g
print(g)
?text
?lines
?points
?axis
?llines
load("~/Documents/Repos/ReproducibleResearch/RepData_PeerAssessment1/Untitled.RData")
getwd()
setwd('~/Documents/Repos/ReproducibleResearch/RepData_PeerAssessment1/')
all.equal(unique(allNA$steps),unique(activityData$steps))
all.equal(unique(allNA$interval),unique(activityData$interval))
?na.omit
medianStepsPerInt<-as.data.frame.table(tapply(activityData$steps, activityData$interval, median, na.rm=TRUE))
View(medianStepsPerInt)
names(medianStepsPerInt)<-c('interval', 'steps')
View(medianStepsPerInt)
all.equal(unique(activityData$interval[is.na(activityData$interval)]),unique(activityData$interval))
all.equal(unique(activityData$interval[is.na(activityData$steps)]),unique(activityData$interval))
tapply(X=ex$steps, INDEX = ex$interval, FUN = function(X, INDEX) if(is.na(x)){x<-medianStepsPerInt$steps[which(medianStepsPerInt$interval==INDEX)]})
tapply(X=ex$steps, INDEX = ex$interval, FUN = function(X, INDEX) if(is.na(X)){X<-medianStepsPerInt$steps[which(medianStepsPerInt$interval==INDEX)]})
tapply(X=ex$steps, INDEX = ex$interval, FUN = function(X, INDEX) if(is.na(X)) X<-medianStepsPerInt$steps[which(medianStepsPerInt$interval==INDEX)])
ind <- which(is.na(activityData), arr.ind=TRUE)
ex1<-apply(ex, 1, function(x) {x[is.na(x$steps)]=medianStepsPerInt$steps[medianStepsPerInt$interval==x$interval]})
ex1<-apply(ex, 1, function(x) {x[is.na(x['steps']=medianStepsPerInt$steps[medianStepsPerInt$interval==x$interval]})
ex1<-apply(ex, 1, function(x) {x[is.na(x['steps'])]=medianStepsPerInt$steps[medianStepsPerInt$interval==x$interval]})
ex1<-apply(ex, 1, function(x) {x[is.na(x['steps'])]=medianStepsPerInt$steps[medianStepsPerInt$interval==x['interval']]})
ex1<-apply(ex, 1)
ex1<-apply(ex, 1,NULL)
ex1<-apply(ex, 1, function(x) print x)
ex1<-apply(ex, 1, function(x) print (x))
ex1<-apply(ex, 1, function(x) {if(is.na(x['steps'])) x['steps']=medianStepsPerInt$steps[medianStepsPerInt$interval==x['interval']]})
ex1<-apply(ex, 1, function(x) {if(is.na(x['steps'])) x['steps']<-medianStepsPerInt$steps[which(medianStepsPerInt$interval==x['interval'])]})
ex1<-apply(ex, 1, function(x) {if(is.na(x['steps'])) x['steps']=-1})
head(ex1)
ex1<-apply(ex, 1, function(x) {if(is.na(x['steps'])) x['steps']=x['interval']})
head(ex1)
ex1<-apply(ex, 1, function(x) {if(is.na(x['steps'])) x['steps']=medianStepsPerInt$steps[which(medianStepsPerInt$interval==x['interval'])]})
medianStepsPerInt$steps[which(medianStepsPerInt$interval==5)]
medianStepsPerInt$steps[which(medianStepsPerInt$interval==10)]
medianStepsPerInt$steps[which(medianStepsPerInt$interval==255)]
ex$steps
ex$steps[is.na(ex$steps)]<-medianStepsPerInt$steps[which(medianStepsPerInt$interval==ex$interval)]
lll<-split.data.frame(ex, ex$interval)
ifelse(is.na(ex$steps), medianStepsPerInt$steps[which(medianStepsPerInt$interval=ex$steps)], ex$steps)
ifelse(is.na(ex$steps), medianStepsPerInt$steps[which(medianStepsPerInt$interval==ex$steps)], ex$steps)
ifelse(is.na(ex$steps), medianStepsPerInt$steps[which(medianStepsPerInt$interval==ex$interval)], ex$steps)
tapply(ex$steps, ex$interval, function(x) if(is.na(x)) x<-medianStepsPerInt$steps[medianStepsPerInt$interval==INDEX])
tapply(ex$steps, medianStepsPerInt$interval, function(x) if(is.na(x)) x<-medianStepsPerInt$steps)
ex$steps[is.na(ex$steps)]<-tapply(ex$steps, ex$interval, median, na.rm=T)[ex$steps[is.na(ex$steps)]]
View(ex)
nrow(ex$steps[is.na(ex$steps)])
newActivity<-activityData
newStepsPerDay<-as.data.frame.table(tapply(newActivity$steps, newActivity$interval, sum))
View(newStepsPerDay)
newStepsPerDay<-as.data.frame.table(tapply(newActivity$steps, newActivity$date, sum))
View(newStepsPerDay)
is.na(newActivity$steps)
View(newActivity)
newActivity$steps[is.na(newActivity$steps)]<-tapply(newActivity$steps, newActivity$interval, median, na.rm=T)[newActivity$steps[is.na(newActivity$steps)]]
is.na(newActivity$steps)
is.na(ex$steps)
length(is.na(ex$steps))
ex1<-apply(allNA 1, function(x) if(is.na(x['steps'])) x['steps']=medianStepsPerInt$steps[medianStepsPerInt['interval']==x['interval']])
apply(allNA 1, function(x) if(is.na(x['steps'])) x['steps']=medianStepsPerInt$steps[medianStepsPerInt['interval']==x['interval']])
apply(allNA, 1, function(x) if(is.na(x['steps'])) x['steps']=medianStepsPerInt$steps[medianStepsPerInt['interval']==x['interval']])
for i in medianStepsPerInt$interval
medianStepsPerInt$interval
for (i in medianStepsPerInt$interval)
if(is.na(ex$step))
)
for (i in is.na(ex$steps))
ex$steps[i]<-medianStepsPerInt$steps[medianStepsPerInt$interval==ex$interval[i]]
]
)
}
{}
for (i in is.na(ex$steps)){}
for (i in is.na(ex$steps)){
ex$steps[i]<-medianStepsPerInt$steps[medianStepsPerInt$interval==ex$interval[i]]
}
is.na(ex$steps)
length(is.na(ex$steps))
length(!is.na(ex$steps))
newStepsPerDay<-as.data.frame.table(tapply(ex$steps, ex$interval, FUN = sum))
names(newStepsPerDay)<-c('date', 'steps')
class(newStepsPerDay$date)
newStepsPerDay$date<-as.Date(newStepsPerDay$date)
View(newStepsPerDay)
newStepsPerDay<-as.data.frame.table(tapply(ex$steps, ex$date, FUN = sum))
names(newStepsPerDay)<-c('date', 'steps')
newStepsPerDay$date<-as.Date(newStepsPerDay$date)
View(newStepsPerDay)
class(ex$date)
newStepsPerDay$date<-as.Date(newStepsPerDay$date)
View(newStepsPerDay)
tapply(ex$steps, ex$date, FUN = sum)
View(ex)
is.na(ex$steps)
length(is.na(ex$steps))
length(!is.na(ex$steps))
nrow(ex[is.na(ex$steps),])
View(ex)
which(is.na(ex$steps))
length(which(is.na(ex$steps)))
for (i in which(is.na(ex$steps))){}
for (i in which(is.na(ex$steps))){
ex$steps[i]=medianStepsPerInt$steps[medianStepsPerInt$interval==ex$interval[i]]
}
length(which(is.na(ex$steps)))
tapply(ex$steps, ex$date, FUN = sum)medianStepsPerInt<-as.data.frame.table(tapply(activityData$steps, activityData$interval, median, na.rm=TRUE))
names(medianStepsPerInt)<-c('interval', 'steps')
medianStepsPerInt<-as.data.frame.table(tapply(activityData$steps, activityData$interval, median, na.rm=TRUE))
names(medianStepsPerInt)<-c('interval', 'steps')
newActivity<-activityData
for (i in which(is.na(newActivity$steps))){
newActivity$steps[i]=medianStepsPerInt$steps[medianStepsPerInt$interval==newActivity$interval[i]]
}
length(which(is.na(newActivity$steps)))
newStepsPerDay<-as.data.frame.table(tapply(newActivity$steps, newActivity$date, FUN = sum))
View(newStepsPerDay)
names(newStepsPerDay)<-c('date', 'steps')
class(newStepsPerDay$date)
newStepsPerDay$date<-as.Date(newStepsPerDay)
newStepsPerDay$date<-as.Date(newStepsPerDay$date)
library(ggplot2)
Sys.setlocale("LC_TIME","en_GB.UTF-8")
ggplot(newStepsPerDay, aes(x=date, y=steps)) + geom_bar()
ggplot(newStepsPerDay, aes(x=date, y=steps)) + geom_bar(stat='identity')
ggplot(newStepsPerDay, aes(x=date, y=steps)) + geom_bar(stat='identity', fill='blue')
ggplot(newStepsPerDay, aes(x=date, y=steps)) + geom_bar(stat='identity', fill='blue')+geom_line(stat="hline", aes(yintercept=mean((newStepsPerDay$steps))), color='red')+geom_line(stat="hline", aes(yintercept=median(newStepsPerDay$steps)), color='black', linetype='dotted')
?diff
meanStep<-mean(stepsPerDay$steps)
medianSteps<-median(stepsPerDay$steps)
stepsPerDay<-as.data.frame.table(tapply(activityData$steps, activityData$date, FUN = sum, na.rm=TRUE))
names(stepsPerDay)<-c('date', 'steps')
stepsPerDay$date<-as.Date(stepsPerDay$date)
meanStep<-mean(stepsPerDay$steps)
medianSteps<-median(stepsPerDay$steps)
newMeanStep<-mean(newStepsPerDay$steps)
diff(c(meanStep, newMeanStep)
)
?xtabs
?xtable
stepsFeat<-table(meanStep, newMeanStep)
stepsFeat<-rbind(stepsFeat,medianSteps, newMeanStep)
stepsFeat<-rbind(stepsFeat,medianSteps, newMeanStep)
stepsFeat
newMedianSteps<-median(newStepsPerDay$steps)
stepsFeat<-rbind(stepsFeat,medianSteps, newMedianSteps)
stepsFeat
library(xtable)
install.packages("xtable")
?matrix
stepsFeat<-matrix(x(meanStep, newMeanStep, newMeanStep-meanStep, medianSteps, newMedianSteps, newMedianSteps=medianSteps), ncol = 3, nrow=2)
stepsFeat<-matrix(c(meanStep, newMeanStep, newMeanStep-meanStep, medianSteps, newMedianSteps, newMedianSteps=medianSteps), ncol = 3, nrow=2)
stepsFeat
?xtable
library(xtable)
?xtable
xtable(stepsFeat,)
xtable(stepsFeat)
des<-xtable(stepsFeat)
print (des)
print (des, type="html")
colnames(stepsFeat)<-c('Old Value', 'New Value', 'Diff')
stepsFeat
rownames(stepsFeat)<-c('Mena', 'Median')
stepsFeat
xtable(stepsFeat)
stepsFeat
stepsFeat<-matrix(c(meanStep, medianSteps, newMeanStep, newMedianSteps, newMedianSteps-medianSteps, newMeanStep- meanSteps), ncol = 3, nrow=2)
stepsFeat<-matrix(c(meanStep, medianSteps, newMeanStep, newMedianSteps, newMedianSteps-medianSteps, newMeanStep- meanStep), ncol = 3, nrow=2)
stepsFeat
stepsFeat<-matrix(c(meanStep, medianSteps, newMeanStep, newMedianSteps, newMeanStep- meanStep, newMedianSteps-medianSteps), ncol = 3, nrow=2)
stepsFeat
colnames(stepsFeat)<-c('Old Value', 'New Value', 'Diff')
rownames(stepsFeat)<-c('Mena', 'Median')
stepsFeat
package(chron)
library(timeDate)
install.packages('timeDate')
library(timeDate)
?is.weekend
?isWeekday
days<-sapply(newActivity$date, 1, isWeekday)
days<-sapply(newActivity$date, 1,FUN = isWeekday
)
days
class(newActivity$date)
isWeekday(newActivity$date[1])
days[1]
days[2]
days[6]
days[7]
class(days)
days<-sapply(X=newActivity$date, 1, ifelse(isWeekday(X), 'weekday', 'weekend'))
days<-sapply(X=newActivity$date, ifelse(isWeekday(X), 'weekday', 'weekend'))
days<-sapply(X=newActivity$date, ifelse(isWeekday, 'weekday', 'weekend'))
days<-sapply(newActivity$date, ifelse(isWeekday, 'weekday', 'weekend'))
days<-apply(newActivity$date,MARGIN = 1, ifelse(isWeekday, 'weekday', 'weekend'))
nrow(newActivity)
for(i in 0:nrow(newActivity)){
newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')
}
cbind(dayType = 0, newActivity)
View(newActivity)
newActivity<-cbind(dayType = 0, newActivity)
View(newActivity)
for(i in 0:nrow(newActivity)){
newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')
}
View(newActivity)
for(i in 0:nrow(newActivity){newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')
for(i in 0:nrow(newActivity){newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')}
for(i in 0:nrow(newActivity)){newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')}
for(i in 1:nrow(newActivity)){newActivity$dayType[i]<-ifelse(isWeekday(newActivity$date),'weekday','weekend')}
wA
warnings()
for(i in 1:nrow(newActivity)){}
for(i in 1:nrow(newActivity)){
if(isWeekday(newActivity$date)){}
}
for(i in 1:nrow(newActivity)){
if(isWeekday(newActivity$date[i])){}
}
for(i in 1:nrow(newActivity)){
if(isWeekday(newActivity$date[i])){
newActivity$dayType[i]<-'weekday'}
else{
newActivity$dayType[i]<-'weekend'
}
}
library(plyr)
?ddply
View(newActivity)
ddply(newActivity, .(interval, dayType), summarize, mean=mean(steps))
stepsPerDayType<-ddply(newActivity, .(interval, dayType), summarize, mean=mean(steps))
View(stepsPerDayType)
ggplot(stepsPerDayType, aes(x=interval,y=steps))+geom_line()
ddply(newActivity, .(interval, dayType), summarize, meanSteps=mean(steps))
stepsPerDayType<-ddply(newActivity, .(interval, dayType), summarize, meanSteps=mean(steps))
View(newStepsPerDay)
View(stepsPerDayType)
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line()
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')+facet_wrap(~dayType)
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')+facet_wrap(~dayType, nrow=2)
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')+facet_wrap(~dayType, nrow=2) +ylab('Number of steps')
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')+facet_wrap(~dayType, nrow=2) +ylab('Number of steps')+xlab('Interval')+ggtitle('The average number of steps taken each day (cross all weekday days or weekend days )')
?isWeekday
library(timeDate)
library(ggplot2)
Sys.setlocale("LC_TIME","en_GB.UTF-8")
qFig<-ggplot(data=stepsPerDay, aes(x=date, y=steps))
qFig + geom_bar(stat='identity', fill='blue')+ggtitle('Total number of steps taken per day')+ geom_line(stat="hline", aes(yintercept=mean((stepsPerDay$steps))), color='red')+geom_line(stat="hline", aes(yintercept=median(stepsPerDay$steps)), color='black', linetype='dotted')
library(ggplot2)
ggplot(cleanActivity,aes(x=interval, y=steps))+geom_line(color='blue')+ggtitle('The time series plot of the 5-minute interval and the number of steps')
ggplot(newStepsPerDay, aes(x=date, y=steps)) + ggtitle('Total number of steps taken per day') + geom_bar(stat='identity', fill='blue')+geom_line(stat="hline", aes(yintercept=mean((newStepsPerDay$steps))), color='red')+geom_line(stat="hline", aes(yintercept=median(newStepsPerDay$steps)), color='black', linetype='dotted')
stepsPerDayType<-ddply(newActivity, .(interval, dayType), summarize, meanSteps=mean(steps))
ggplot(stepsPerDayType, aes(x=interval,y=meanSteps))+geom_line(color='blue')+facet_wrap(~dayType, nrow=2) +ylab('Number of steps')+xlab('Interval')+ggtitle('The average number of steps cross all weekday days or weekend days')
